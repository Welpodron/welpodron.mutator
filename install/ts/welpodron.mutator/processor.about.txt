На стороне бэка формируется вот такое вот


$result = [
			'html' => $html,
			'assets' => [
				'css' => $this->getCssList(),
				'js' => $this->getJsList(),
				'string' => $this->getStringList()
			],
			'additionalParams' => $additionalResponseParams,
		];

и добавляет к ответу хедер 

$this->addHeader('X-Process-Assets', 'assets');

Это можно посмотреть в bitrix\modules\main\lib\engine\response\htmlcontent.php

На стороне js в core.js

вот тут вот в buildAjaxPromiseToRestoreCsrf

var assetsLoaded = new BX.Promise();

		var headers = request.getAllResponseHeaders().trim().split(/[\r\n]+/);
		var headerMap = {};
		headers.forEach(function (line) {
			var parts = line.split(': ');
			var header = parts.shift().toLowerCase();
			headerMap[header] = parts.join(': ');
		});

		if (!headerMap['x-process-assets'])
		{
			assetsLoaded.fulfill(response);

			return assetsLoaded;
		}

...

Так как с бэка приходит X-Process-Assets 

то вот эта часть 

if (!headerMap['x-process-assets'])
		{
			assetsLoaded.fulfill(response);

			return assetsLoaded;
		}

выполняться не будет и скрипт пойдет дальше 

var assets = BX.prop.getObject(BX.prop.getObject(response, "data", {}), "assets", {});
		var promise = new Promise(function(resolve, reject) {
			var css = BX.prop.getArray(assets, "css", []);
			BX.load(css, function(){
				BX.loadScript(
					BX.prop.getArray(assets, "js", []),
					resolve
				);
			});
		});
		promise.then(function(){
            // После того как загрузили js и css начинаем вставлять строки просто тупо в хеад
			var strings = BX.prop.getArray(assets, "string", []);

            // Весь массив строк тупо херачим в одну строку 
			var stringAsset = strings.join('\n');

            // BX.html смотри ниже
			BX.html(document.head, stringAsset, { useAdjacentHTML: true }).then(function(){
				assetsLoaded.fulfill(response);
			});
		});

		return assetsLoaded;

Тут начинается постепенно выполняться загрузка пришедших js и css и стрингов с бэка

Начинается все я так понял с обработки css

 BX.prop.getArray(assets, "css", []);

На бэке этот массив выглядит вот так:

[
    'ССЫЛКА_1',
    'ССЫЛКА_2,
]

смотри $cssList

В BX.load передается вот этот массив и колбэк, который позже загрузит js (будет ниже разбор)

const LOADING = 3;
const LOADED = 4;
const assets = {};

BX.load = function(items, callback, doc)
{
    if (!BX.isReady)
    {
        var _args = arguments;
        BX.ready(function() {
            BX.load.apply(this, _args);
        });

        return null;
    }

    doc = doc || document;

    callback = BX.Type.isFunction(callback) ? callback : () => {};

    return loadAsync(items, callback, doc);
};

Тут согласно тому что написано выше будет вызвана для css: 

колбэк будет BX.loadScript(
					BX.prop.getArray(assets, "js", []),
					resolve
				);

loadAsync(МАССИВ_CSS_КОТОРЫЙ_ВЫШЕ, колбэк, document)

Далее идет 

function loadAsync(items, callback, doc)
{
    if (!BX.type.isArray(items))
    {
        // если не массив, то просто вызвать колбэк
        callback();

        return;
    }

    function onLoad()
    {
        const nextAsset = queue.shift();
        if (nextAsset)
        {
            load(nextAsset, onLoad, doc);
        }
        else if (allLoaded())
        {
            callback();
        }
    }

    function allLoaded()
    {
        for (const name in assetMap)
        {
            if (assetMap[name].state !== LOADED)
            {
                return false;
            }
        }

        return true;
    }
    
    // Тут создается очередь загрузки
    const queue = [];
    const assetMap = {};

    items.forEach(item => {
        // Тут проходится по всем ссылкам массива
        // функция getAsset описана НИЖЕ!
        const asset = getAsset(item);

        if (asset && asset.state !== LOADED)
        {
            // Запихиваем в очередь если данный ассет еще не был загружен
            queue.push(asset);
            assetMap[asset.name] = asset;
        }
    });

    // Если очередь не пуста начинаем кароч грузить используя load
    if (queue.length > 0)
    {
        const maxParallelLoads = 6;
        const parallelLoads = Math.min(queue.length, maxParallelLoads);
        const firstPackage = queue.splice(0, parallelLoads);
        firstPackage.forEach(asset => {
            load(asset, onLoad, doc);
        });
    }
    else
    {
        callback();
    }
}


function getAsset(item)
	{
		var asset = {};

        // Если пришедший сюда ассет (см выше) объект, втф ???
		if (typeof item === "object")
		{
			asset = item;
			asset.name = asset.name ? asset.name : BX.util.hashCode(item.url);
		}
		else
		{
            // Чаще всего скорее всего срабатывает вот это ???
            // Тут в качестве имени будет хэш ассета (в принципе ассет же это урл, те хэш урла)
            // Как считается хэш смотри ниже
			asset = { name: BX.util.hashCode(item), url : item };
		}


        // Проверяем экстеншн ассета 
		var ext = BX.type.isNotEmptyString(asset.ext) ? asset.ext : BX.util.getExtension(asset.url);

        /*

        Вот тут происходит втф 

        Дело в том что isCssLoaded определяется дважды и имеет разные определения функции

        Есть вот такое (без аргумента), ЛЕЖИТ ВНУТРИ loadAsset

        function loadAsset(asset, callback, doc) {
            ...
            function isCssLoaded()
            {
                if (asset.state !== LOADED && asset.cssRetries <= 20)
                {
                    for (var i = 0, l = doc.styleSheets.length; i < l; i++)
                    {
                        if (doc.styleSheets[i].href === ele.href)
                        {
                            process({"type": "load"});
                            return;
                        }
                    }

                    asset.cssRetries++;
                    asset.cssTimeout = window.setTimeout(isCssLoaded, 250);
                }
            }
            ...
        } 



        Есть вот такое с аргументом (лежит я так подозреваю ГЛОБАЛЬНО):
        и вот там ниже вызывается именно эта функция 
    	function isCssLoaded(fileSrc)
        {
            // initCssList смотри ниже
            initCssList();

            // normalizeUrl смотри ниже
            fileSrc = normalizeUrl(fileSrc);
            // normalizeMinUrl смотри ниже
            var fileSrcMin = normalizeMinUrl(fileSrc);

            //cssList заполняется внутри initCssList

            // fileSrc !== fileSrcMin втф???

            return (fileSrc !== fileSrcMin && BX.util.in_array(fileSrcMin, cssList)) || BX.util.in_array(fileSrc, cssList);
        }



        */

        // Кароч тут просто проверка что этот ассет уже есть

		if ((ext === "css" && isCssLoaded(asset.url)) || isScriptLoaded(asset.url))
		{
			asset.state = LOADED;
		}

        // ВОт это вот assets это переменная объект const assets = {} которая вон в самом верху кароч

        // Кароч вот тут мы просто заносим в объект тот самый, если же он там уже есть то прост получаем его, если нет добавляем и получаем его обратно
		var existing = assets[asset.name];
		if (existing && existing.url === asset.url)
		{
			return existing;
		}

		assets[asset.name] = asset;

		return asset;
	}

    // Функция для расчета хэша
    BX.util.hashCode: function(str)
		{
			if(!BX.type.isNotEmptyString(str))
			{
				return 0;
			}

			var hash = 0;
			for (var i = 0; i < str.length; i++)
			{
				var c = str.charCodeAt(i);
				hash = ((hash << 5) - hash) + c;
				hash = hash & hash;
			}
			return hash;
		},


    // Функция для получения эктеншона
     BX.util.getExtension: function (url)
		{
			url = url || "";
			var items = url.split("?")[0].split(".");
			return items[items.length-1].toLowerCase();
		},

        // Функция которая проверяет пустая ли строка (рофл) Хз пока что такое Type
        BX.type.isNotEmptyString это функция: value => Type.isString(value) && value !== ''

    // Функция которая заполняет переменную cssList ???
	function initCssList()
	{
		if(!cssInit)
		{
			var linksCol = document.getElementsByTagName('link');

			if(!!linksCol && linksCol.length > 0)
			{
				for(var i = 0; i < linksCol.length; i++)
				{
					var href = linksCol[i].getAttribute('href');
					if (BX.type.isNotEmptyString(href))
					{
						href = normalizeMinUrl(normalizeUrl(href));
						cssList.push(href);
					}
				}
			}
			cssInit = true;
		}
	}

    // Функция normalizeUrl

    function normalizeUrl(url)
	{
		if (!BX.type.isNotEmptyString(url))
		{
			return "";
		}

		url = BX.getJSPath(url);
		url = url.replace(/\?[0-9]*$/, "");

		return url;
	}

    BX.getJSPath = function(js)
	{
		return js.replace(/^(http[s]*:)*\/\/[^\/]+/i, '');
	};

	BX.getCSSPath = function(css)
	{
		return css.replace(/^(http[s]*:)*\/\/[^\/]+/i, '');
	};

    // Функция normalizeMinUrl
    	function normalizeMinUrl(url)
	{
		if (!BX.type.isNotEmptyString(url))
		{
			return "";
		}

		var minPos = url.indexOf(".min");
		return minPos >= 0 ? url.substr(0, minPos) + url.substr(minPos + 4) : url;
	}


	function load(asset, callback, doc)
	{
		callback = callback || BX.DoNothing;

		if (asset.state === LOADED)
		{
			callback();
			return;
		}

		asset.state = LOADING;

		loadAsset(
			asset,
			function () {
				asset.state = LOADED;
				callback();
			},
			doc
		);
	}


	function loadAsset(asset, callback, doc)
	{
		callback = callback || BX.DoNothing;

		function error(event)
		{
			ele.onload = ele.onreadystatechange = ele.onerror = null;
			callback();
		}

		function process(event)
		{
			event = event || window.event;
			if (event.type === "load" || (/loaded|complete/.test(ele.readyState) && (!doc.documentMode || doc.documentMode < 9)))
			{
				window.clearTimeout(asset.errorTimeout);
				window.clearTimeout(asset.cssTimeout);
				ele.onload = ele.onreadystatechange = ele.onerror = null;
				callback();
			}
		}

		function isCssLoaded()
		{
			if (asset.state !== LOADED && asset.cssRetries <= 20)
			{
				for (var i = 0, l = doc.styleSheets.length; i < l; i++)
				{
					if (doc.styleSheets[i].href === ele.href)
					{
						process({"type": "load"});
						return;
					}
				}

				asset.cssRetries++;
				asset.cssTimeout = window.setTimeout(isCssLoaded, 250);
			}
		}

		let ele = null;
		const ext = BX.type.isNotEmptyString(asset.ext) ? asset.ext : BX.util.getExtension(asset.url);

		if (ext === "css")
		{
			ele = doc.createElement("link");
			ele.type = "text/" + (asset.type || "css");
			ele.rel = "stylesheet";
			ele.href = asset.url;

			asset.cssRetries = 0;
			asset.cssTimeout = window.setTimeout(isCssLoaded, 500);
		}
		else
		{
			ele = doc.createElement("script");
			ele.type = "text/" + (asset.type || "javascript");
			ele.src = asset.url;
		}

		ele.onload = ele.onreadystatechange = process;
		ele.onerror = error;

		ele.async = false;
		ele.defer = false;

		asset.errorTimeout = window.setTimeout(function () {
			error({type: "timeout"});
		}, 7000);

		if (ext === "css")
		{
            // cssList смотри выше там заполняется кароч
			cssList.push(normalizeMinUrl(normalizeUrl(asset.url)));
		}
		else
		{
			jsList.push(normalizeMinUrl(normalizeUrl(asset.url)));
		}

		let templateLink = null;
		const head = doc.head || doc.getElementsByTagName("head")[0];
		if (ext === "css" && (templateLink = getTemplateLink(head)) !== null)
		{
			templateLink.parentNode.insertBefore(ele, templateLink);
		}
		else
		{
			head.insertBefore(ele, head.lastChild);
		}
	}


BX.getJSList = function()
	{
		initJsList();
		return jsList;
	};


function initJsList()
	{
		if(!jsInit)
		{
			var scriptCol = document.getElementsByTagName('script');

			if(!!scriptCol && scriptCol.length > 0)
			{
				for(var i=0; i<scriptCol.length; i++)
				{
					var src = scriptCol[i].getAttribute('src');

					if (BX.type.isNotEmptyString(src))
					{
						src = normalizeMinUrl(normalizeUrl(src));
						jsList.push(src);
					}
				}
			}
			jsInit = true;
		}
	}


// BX html только после скриптов и css
function html(node, _html, params = {}) {
            // тут из выше будет в качестве _html будет тупо одна строка из всех $stringList
            // node -> document.head
            // params содержит useAdjacentHTML: true

	      if (Type.isNil(_html) && Type.isDomNode(node)) {
	        return node.innerHTML;
	      }

	      const parsedHtml = BX.processHTML(_html);
	      const externalCss = parsedHtml.STYLE.reduce(externalStyles, []);
	      const externalJs = parsedHtml.SCRIPT.reduce(externalScripts, []);
	      const inlineJs = parsedHtml.SCRIPT.reduce(inlineScripts, []);
	      if (Type.isDomNode(node)) {
	        if (params.htmlFirst || !externalJs.length && !externalCss.length) {
	          if (params.useAdjacentHTML) {
	            node.insertAdjacentHTML('beforeend', parsedHtml.HTML);
	          } else {
	            node.innerHTML = parsedHtml.HTML;
	          }
	        }
	      }
	      return Promise.all([loadAll(externalJs), loadAll(externalCss)]).then(() => {
	        if (Type.isDomNode(node) && (externalJs.length > 0 || externalCss.length > 0)) {
	          if (params.useAdjacentHTML) {
	            node.insertAdjacentHTML('beforeend', parsedHtml.HTML);
	          } else {
	            node.innerHTML = parsedHtml.HTML;
	          }
	        }

	        // eslint-disable-next-line
	        inlineJs.forEach(script => BX.evalGlobal(script));
	        if (Type.isFunction(params.callback)) {
	          params.callback();
	        }
	      });